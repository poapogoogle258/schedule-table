// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: userId
func (_m *UserRepository) FindOne(userId string) (*dao.Users, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *dao.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dao.Users, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *dao.Users); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindOneByEmail(email string) (*dao.Users, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByEmail")
	}

	var r0 *dao.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dao.Users, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *dao.Users); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Profile provides a mock function with given fields: userId
func (_m *UserRepository) Profile(userId string) (*dao.Users, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for Profile")
	}

	var r0 *dao.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dao.Users, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *dao.Users); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: userId, column, value
func (_m *UserRepository) UpdateOne(userId string, column string, value interface{}) error {
	ret := _m.Called(userId, column, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(userId, column, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
