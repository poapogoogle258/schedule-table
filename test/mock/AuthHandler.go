// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	service "schedule_table/internal/service"
)

// AuthHandler is an autogenerated mock type for the AuthHandler type
type AuthHandler struct {
	mock.Mock
}

// CheckUserTokenExist provides a mock function with given fields: claims, token
func (_m *AuthHandler) CheckUserTokenExist(claims *service.AuthCustomClaims, token string) error {
	ret := _m.Called(claims, token)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserTokenExist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*service.AuthCustomClaims, string) error); ok {
		r0 = rf(claims, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: c
func (_m *AuthHandler) Login(c *gin.Context) {
	_m.Called(c)
}

// Profile provides a mock function with given fields: c
func (_m *AuthHandler) Profile(c *gin.Context) {
	_m.Called(c)
}

// ValidateToken provides a mock function with given fields: c
func (_m *AuthHandler) ValidateToken(c *gin.Context) {
	_m.Called(c)
}

// NewAuthHandler creates a new instance of AuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthHandler {
	mock := &AuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
