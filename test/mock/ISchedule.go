// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ISchedule is an autogenerated mock type for the ISchedule type
type ISchedule struct {
	mock.Mock
}

// GenerateTasks provides a mock function with given fields: start, end
func (_m *ISchedule) GenerateTasks(start time.Time, end time.Time) *[]dao.Tasks {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTasks")
	}

	var r0 *[]dao.Tasks
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) *[]dao.Tasks); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Tasks)
		}
	}

	return r0
}

// GetCalendarId provides a mock function with no fields
func (_m *ISchedule) GetCalendarId() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCalendarId")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// GetId provides a mock function with no fields
func (_m *ISchedule) GetId() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// GetPriority provides a mock function with no fields
func (_m *ISchedule) GetPriority() int8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPriority")
	}

	var r0 int8
	if rf, ok := ret.Get(0).(func() int8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int8)
	}

	return r0
}

// NewISchedule creates a new instance of ISchedule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISchedule(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISchedule {
	mock := &ISchedule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
