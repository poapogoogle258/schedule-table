// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"
)

// ITaskRepository is an autogenerated mock type for the ITaskRepository type
type ITaskRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: conds
func (_m *ITaskRepository) Find(conds ...interface{}) (*[]dao.Tasks, error) {
	var _ca []interface{}
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *[]dao.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*[]dao.Tasks, error)); ok {
		return rf(conds...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *[]dao.Tasks); ok {
		r0 = rf(conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(conds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatesAndFind provides a mock function with given fields: taskId, value
func (_m *ITaskRepository) UpdatesAndFind(taskId string, value interface{}) (*dao.Tasks, error) {
	ret := _m.Called(taskId, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdatesAndFind")
	}

	var r0 *dao.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*dao.Tasks, error)); ok {
		return rf(taskId, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *dao.Tasks); ok {
		r0 = rf(taskId, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(taskId, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITaskRepository creates a new instance of ITaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskRepository {
	mock := &ITaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
