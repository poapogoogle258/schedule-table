// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"
)

// MembersRepository is an autogenerated mock type for the MembersRepository type
type MembersRepository struct {
	mock.Mock
}

// CheckExist provides a mock function with given fields: memberId
func (_m *MembersRepository) CheckExist(memberId string) error {
	ret := _m.Called(memberId)

	if len(ret) == 0 {
		panic("no return value specified for CheckExist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(memberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: newMember
func (_m *MembersRepository) Create(newMember *dao.Members) error {
	ret := _m.Called(newMember)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dao.Members) error); ok {
		r0 = rf(newMember)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOne provides a mock function with given fields: memberId, calendarId
func (_m *MembersRepository) DeleteOne(memberId string, calendarId string) error {
	ret := _m.Called(memberId, calendarId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(memberId, calendarId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: conds
func (_m *MembersRepository) Find(conds ...interface{}) (*[]dao.Members, error) {
	var _ca []interface{}
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *[]dao.Members
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*[]dao.Members, error)); ok {
		return rf(conds...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *[]dao.Members); ok {
		r0 = rf(conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Members)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(conds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: conds
func (_m *MembersRepository) FindOne(conds ...interface{}) (*dao.Members, error) {
	var _ca []interface{}
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *dao.Members
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*dao.Members, error)); ok {
		return rf(conds...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *dao.Members); ok {
		r0 = rf(conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Members)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(conds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatesAndFindOne provides a mock function with given fields: memberId, calendarId, insert
func (_m *MembersRepository) UpdatesAndFindOne(memberId string, calendarId string, insert *dao.Members) (*dao.Members, error) {
	ret := _m.Called(memberId, calendarId, insert)

	if len(ret) == 0 {
		panic("no return value specified for UpdatesAndFindOne")
	}

	var r0 *dao.Members
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *dao.Members) (*dao.Members, error)); ok {
		return rf(memberId, calendarId, insert)
	}
	if rf, ok := ret.Get(0).(func(string, string, *dao.Members) *dao.Members); ok {
		r0 = rf(memberId, calendarId, insert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Members)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *dao.Members) error); ok {
		r1 = rf(memberId, calendarId, insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembersRepository creates a new instance of MembersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembersRepository {
	mock := &MembersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
