// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dto "schedule_table/internal/model/dto"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// MemberHandler is an autogenerated mock type for the MemberHandler type
type MemberHandler struct {
	mock.Mock
}

// CreateNewMember provides a mock function with given fields: c
func (_m *MemberHandler) CreateNewMember(c *gin.Context) (*dto.ResponseMember, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewMember")
	}

	var r0 *dto.ResponseMember
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.ResponseMember, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.ResponseMember); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseMember)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMemberId provides a mock function with given fields: c
func (_m *MemberHandler) DeleteMemberId(c *gin.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMemberId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditMember provides a mock function with given fields: c
func (_m *MemberHandler) EditMember(c *gin.Context) (*dto.ResponseMember, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for EditMember")
	}

	var r0 *dto.ResponseMember
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.ResponseMember, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.ResponseMember); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseMember)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberId provides a mock function with given fields: c
func (_m *MemberHandler) GetMemberId(c *gin.Context) (*dto.ResponseMember, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberId")
	}

	var r0 *dto.ResponseMember
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.ResponseMember, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.ResponseMember); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseMember)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: c
func (_m *MemberHandler) GetMembers(c *gin.Context) (*[]dto.ResponseMember, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 *[]dto.ResponseMember
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*[]dto.ResponseMember, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *[]dto.ResponseMember); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.ResponseMember)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMemberHandler creates a new instance of MemberHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberHandler {
	mock := &MemberHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
