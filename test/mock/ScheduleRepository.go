// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"
)

// ScheduleRepository is an autogenerated mock type for the ScheduleRepository type
type ScheduleRepository struct {
	mock.Mock
}

// CreateNewSchedule provides a mock function with given fields: insert
func (_m *ScheduleRepository) CreateNewSchedule(insert *dao.Schedules) (*dao.Schedules, error) {
	ret := _m.Called(insert)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewSchedule")
	}

	var r0 *dao.Schedules
	var r1 error
	if rf, ok := ret.Get(0).(func(*dao.Schedules) (*dao.Schedules, error)); ok {
		return rf(insert)
	}
	if rf, ok := ret.Get(0).(func(*dao.Schedules) *dao.Schedules); ok {
		r0 = rf(insert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Schedules)
		}
	}

	if rf, ok := ret.Get(1).(func(*dao.Schedules) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: scheduleId
func (_m *ScheduleRepository) Delete(scheduleId string) error {
	ret := _m.Called(scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(scheduleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleCalendarId provides a mock function with given fields: calendarId, scheduleId
func (_m *ScheduleRepository) GetScheduleCalendarId(calendarId string, scheduleId string) (*dao.Schedules, error) {
	ret := _m.Called(calendarId, scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleCalendarId")
	}

	var r0 *dao.Schedules
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*dao.Schedules, error)); ok {
		return rf(calendarId, scheduleId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *dao.Schedules); ok {
		r0 = rf(calendarId, scheduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Schedules)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(calendarId, scheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchedulesCalendar provides a mock function with given fields: calendarId
func (_m *ScheduleRepository) GetSchedulesCalendar(calendarId string) (*[]dao.Schedules, error) {
	ret := _m.Called(calendarId)

	if len(ret) == 0 {
		panic("no return value specified for GetSchedulesCalendar")
	}

	var r0 *[]dao.Schedules
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]dao.Schedules, error)); ok {
		return rf(calendarId)
	}
	if rf, ok := ret.Get(0).(func(string) *[]dao.Schedules); ok {
		r0 = rf(calendarId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Schedules)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(calendarId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExits provides a mock function with given fields: scheduleId
func (_m *ScheduleRepository) IsExits(scheduleId string) bool {
	ret := _m.Called(scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for IsExits")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(scheduleId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateSchedule provides a mock function with given fields: scheduleId, insert
func (_m *ScheduleRepository) UpdateSchedule(scheduleId string, insert *dao.Schedules) (*dao.Schedules, error) {
	ret := _m.Called(scheduleId, insert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSchedule")
	}

	var r0 *dao.Schedules
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *dao.Schedules) (*dao.Schedules, error)); ok {
		return rf(scheduleId, insert)
	}
	if rf, ok := ret.Get(0).(func(string, *dao.Schedules) *dao.Schedules); ok {
		r0 = rf(scheduleId, insert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Schedules)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *dao.Schedules) error); ok {
		r1 = rf(scheduleId, insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScheduleRepository creates a new instance of ScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleRepository {
	mock := &ScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
