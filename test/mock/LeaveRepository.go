// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"
)

// LeaveRepository is an autogenerated mock type for the LeaveRepository type
type LeaveRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: insert
func (_m *LeaveRepository) Create(insert *dao.Leaves) error {
	ret := _m.Called(insert)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dao.Leaves) error); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: leaveId
func (_m *LeaveRepository) Delete(leaveId string) error {
	ret := _m.Called(leaveId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(leaveId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exits provides a mock function with given fields: leaveId
func (_m *LeaveRepository) Exits(leaveId string) bool {
	ret := _m.Called(leaveId)

	if len(ret) == 0 {
		panic("no return value specified for Exits")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(leaveId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Find provides a mock function with given fields: conds
func (_m *LeaveRepository) Find(conds ...interface{}) (*[]dao.Leaves, error) {
	var _ca []interface{}
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *[]dao.Leaves
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*[]dao.Leaves, error)); ok {
		return rf(conds...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *[]dao.Leaves); ok {
		r0 = rf(conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Leaves)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(conds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: conds
func (_m *LeaveRepository) FindOne(conds ...interface{}) (*dao.Leaves, error) {
	var _ca []interface{}
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *dao.Leaves
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*dao.Leaves, error)); ok {
		return rf(conds...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *dao.Leaves); ok {
		r0 = rf(conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Leaves)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(conds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLeaveRepository creates a new instance of LeaveRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeaveRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeaveRepository {
	mock := &LeaveRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
