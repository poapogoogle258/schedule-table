// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"
	dto "schedule_table/internal/model/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CalendarRepository is an autogenerated mock type for the CalendarRepository type
type CalendarRepository struct {
	mock.Mock
}

// CheckExist provides a mock function with given fields: calendarId
func (_m *CalendarRepository) CheckExist(calendarId string) error {
	ret := _m.Called(calendarId)

	if len(ret) == 0 {
		panic("no return value specified for CheckExist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(calendarId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByOwnerId provides a mock function with given fields: ownerId
func (_m *CalendarRepository) FindByOwnerId(ownerId string) (*[]dto.ResponseCalendar, error) {
	ret := _m.Called(ownerId)

	if len(ret) == 0 {
		panic("no return value specified for FindByOwnerId")
	}

	var r0 *[]dto.ResponseCalendar
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]dto.ResponseCalendar, error)); ok {
		return rf(ownerId)
	}
	if rf, ok := ret.Get(0).(func(string) *[]dto.ResponseCalendar); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.ResponseCalendar)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLeavesOfCalendarId provides a mock function with given fields: calendarId, start, end
func (_m *CalendarRepository) FindLeavesOfCalendarId(calendarId string, start *time.Time, end *time.Time) (*[]dao.Leaves, error) {
	ret := _m.Called(calendarId, start, end)

	if len(ret) == 0 {
		panic("no return value specified for FindLeavesOfCalendarId")
	}

	var r0 *[]dao.Leaves
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *time.Time, *time.Time) (*[]dao.Leaves, error)); ok {
		return rf(calendarId, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, *time.Time, *time.Time) *[]dao.Leaves); ok {
		r0 = rf(calendarId, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Leaves)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *time.Time, *time.Time) error); ok {
		r1 = rf(calendarId, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMembersOfCalendarId provides a mock function with given fields: calendarId
func (_m *CalendarRepository) FindMembersOfCalendarId(calendarId string) (*[]dao.Members, error) {
	ret := _m.Called(calendarId)

	if len(ret) == 0 {
		panic("no return value specified for FindMembersOfCalendarId")
	}

	var r0 *[]dao.Members
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]dao.Members, error)); ok {
		return rf(calendarId)
	}
	if rf, ok := ret.Get(0).(func(string) *[]dao.Members); ok {
		r0 = rf(calendarId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dao.Members)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(calendarId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneWithAssociation provides a mock function with given fields: calendarId, start, end
func (_m *CalendarRepository) FindOneWithAssociation(calendarId string, start time.Time, end time.Time) (*dao.Calendars, error) {
	ret := _m.Called(calendarId, start, end)

	if len(ret) == 0 {
		panic("no return value specified for FindOneWithAssociation")
	}

	var r0 *dao.Calendars
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) (*dao.Calendars, error)); ok {
		return rf(calendarId, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) *dao.Calendars); ok {
		r0 = rf(calendarId, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Calendars)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(calendarId, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOwnerOfCalendar provides a mock function with given fields: userId, calendarId
func (_m *CalendarRepository) IsOwnerOfCalendar(userId string, calendarId string) bool {
	ret := _m.Called(userId, calendarId)

	if len(ret) == 0 {
		panic("no return value specified for IsOwnerOfCalendar")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userId, calendarId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewCalendarRepository creates a new instance of CalendarRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCalendarRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CalendarRepository {
	mock := &CalendarRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
