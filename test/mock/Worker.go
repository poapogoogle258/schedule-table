// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dao "schedule_table/internal/model/dao"

	mock "github.com/stretchr/testify/mock"

	service "schedule_table/internal/service"

	time "time"

	uuid "github.com/google/uuid"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

// AddBooking provides a mock function with given fields: task, restTime
func (_m *Worker) AddBooking(task *dao.Tasks, restTime time.Duration) error {
	ret := _m.Called(task, restTime)

	if len(ret) == 0 {
		panic("no return value specified for AddBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dao.Tasks, time.Duration) error); ok {
		r0 = rf(task, restTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLeaven provides a mock function with given fields: day
func (_m *Worker) AddLeaven(day time.Time) error {
	ret := _m.Called(day)

	if len(ret) == 0 {
		panic("no return value specified for AddLeaven")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(day)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTask provides a mock function with given fields: task, restTime, options
func (_m *Worker) AddTask(task *dao.Tasks, restTime time.Duration, options ...func(*service.AddTaskOption)) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, task, restTime)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dao.Tasks, time.Duration, ...func(*service.AddTaskOption)) error); ok {
		r0 = rf(task, restTime, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetData provides a mock function with no fields
func (_m *Worker) GetData() *dao.Members {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *dao.Members
	if rf, ok := ret.Get(0).(func() *dao.Members); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Members)
		}
	}

	return r0
}

// GetId provides a mock function with no fields
func (_m *Worker) GetId() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
